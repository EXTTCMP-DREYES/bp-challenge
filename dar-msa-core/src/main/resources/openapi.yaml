openapi: 3.0.0
info:
  title: Banking Core Microservice Documentation
  version: "1.0"
  description: API documentation for account and transaction management.
servers:
  - url: http://localhost:8080
tags:
  - name: Accounts
    description: Operations related to account management
  - name: Transactions
    description: Operations related to transaction processing
paths:
  /accounts/{id}:
    get:
      tags:
        - Accounts
      summary: Retrieve an account by ID
      operationId: getAccountById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the account.
      responses:
        '200':
          description: Account successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '404':
          description: Account not found.
    patch:
      tags:
        - Accounts
      summary: Update an account by ID
      operationId: updateAccount
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountDto'
      responses:
        '200':
          description: Account successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '404':
          description: Account not found.
    delete:
      tags:
        - Accounts
      summary: Delete an account by ID
      operationId: deleteAccount
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the account.
      responses:
        '204':
          description: Account successfully deleted.
        '404':
          description: Account not found.
  /accounts:
    post:
      tags:
        - Accounts
      summary: Create a new account
      operationId: createAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountDto'
      responses:
        '201':
          description: Account successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '409':
          description: Conflict in account creation.
  /transactions:
    post:
      tags:
        - Transactions
      summary: Create a new transaction
      operationId: createTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionDto'
      responses:
        '200':
          description: Transaction processed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDto'
  /transactions/report:
    get:
      tags:
        - Transactions
      summary: Generate transactions report
      operationId: generateTransactionsReport
      parameters:
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Start date for filtering transactions.
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: End date for filtering transactions.
      responses:
        '200':
          description: Transaction report generated successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionDetailsDto'
components:
  schemas:
    AccountDto:
      type: object
      properties:
        id:
          type: string
        number:
          type: string
        type:
          type: string
        balance:
          type: number
          format: double
        status:
          type: string
        customerId:
          type: string
    CreateAccountDto:
      type: object
      properties:
        number:
          type: string
        type:
          type: string
        initialBalance:
          type: number
          format: double
        customerId:
          type: string
      required:
        - number
        - type
        - initialBalance
        - customerId
    UpdateAccountDto:
      type: object
      properties:
        type:
          type: string
      required:
        - type
    CreateTransactionDto:
      type: object
      properties:
        accountId:
          type: string
        amount:
          type: number
          format: double
        deposit:
          type: boolean
      required:
        - accountId
        - amount
        - deposit
    TransactionDto:
      type: object
      properties:
        id:
          type: string
        accountId:
          type: string
        amount:
          type: number
          format: double
        type:
          type: string
    TransactionDetailsDto:
      type: object
      properties:
        transactionId:
          type: string
        accountId:
          type: string
        amount:
          type: number
          format: double
        date:
          type: string
          format: date-time